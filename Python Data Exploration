################
##Correlations
################

corr = df.corr().abs()
#np.triu returns only the upper triangle of an array. 
#Since a correlation matrix is duplicated, this means there will not be duplicated 
#values with the variable names switched order
#np.ones creates an array of shape n,n -->In this case, corr.shape is the shape so 54 by 54
os = (corr.where(np.triu(np.ones(corr.shape), k=1).astype(np.bool))
.stack()
.sort_values(ascending=False))

corr_all=pd.DataFrame(os).reset_index().rename(columns={"index":"Col1",0:"Correlation"})


####################
##Missing %
####################
def missing_ratio(df):
    total=df.isnull().sum()
    percent = (df.isnull().sum()/df.isnull().count()).sort_values(ascending=False)
    missing_data = pd.concat([total, percent],axis=1, keys=['Total', 'Percent']).sort_values(by='Percent', ascending=False)
    return missing_data


###########
##UDF CORR
##########

def corr_list(df):
    import numpy as np
    corr = df.corr().abs()
#np.triu returns only the upper triangle of an array. 
#Since a correlation matrix is duplicated, this means there will not be duplicated 
#values with the variable names switched order
#np.ones creates an array of shape n,n -->In this case, corr.shape is the shape so 54 by 54
    os = (corr.where(np.triu(np.ones(corr.shape), k=1).astype(np.bool))
    .stack()
    .sort_values(ascending=False))

    corr_all=pd.DataFrame(os).reset_index().rename(columns={"index":"Col1",0:"Correlation"})
    return corr_all


##############
##String/Categorical
##############
def string_90(df):
    ninety_unique=pd.DataFrame(columns=["Col_Name", "Ninety", "Total"])

    for col in df.select_dtypes(include='object').columns.values:
        freq = df[col].value_counts().cumsum()/df[col].value_counts().sum()
        ninety=freq[freq<=.9].count()
        total=df[col].value_counts().sum()
        ninety_unique = ninety_unique.append(pd.DataFrame({'Col_Name': col, 'Ninety': ninety, 'Total':total },index=[0]))

    return ninety_unique.reset_index(drop=True)